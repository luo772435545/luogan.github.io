import{_ as a,c as e,o as t,U as o}from"./chunks/framework.Lp4q01XK.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/npm/packagejson文件记录.md","filePath":"frontend/npm/packagejson文件记录.md"}'),r={name:"frontend/npm/packagejson文件记录.md"},l=o('<div class="info custom-block"><p class="custom-block-title">INFO</p><p>例如： &quot;vue&quot;: &quot;^3.2.45&quot;</p></div><h2 id="版本号规范" tabindex="-1">版本号规范 <a class="header-anchor" href="#版本号规范" aria-label="Permalink to &quot;版本号规范&quot;">​</a></h2><p>主版本号（MAJOR）： 当进行不兼容的 API 变更时，增加主版本号。这意味着新版本与之前版本不兼容，可能需要用户修改其代码或配置文件。</p><p>次版本号（MINOR）： 当添加新功能，但与之前版本兼容时，增加次版本号。这表示新版本引入了新的功能，但仍然与老版本保持一定的向后兼容性。</p><p>修订号（PATCH）： 当进行向后兼容的 bug 修复时，增加修订号。修订号变更表示引入了一些小的改进或修复，但不会破坏与之前版本的兼容性。</p><p>预发布版本信息： 在主版本号、次版本号和修订号之后，可以添加预发布标识，如 alpha、beta、rc（Release Candidate）等，以表示该版本为开发阶段或测试阶段的预发布版本。</p><p>构建元数据： 有时，版本号还可以包含构建信息，例如构建日期或唯一的构建标识符。这有助于在开发和部署过程中追踪特定的构建。</p><h2 id="版本号前面的符号" tabindex="-1">版本号前面的符号 <a class="header-anchor" href="#版本号前面的符号" aria-label="Permalink to &quot;版本号前面的符号&quot;">​</a></h2><h3 id="" tabindex="-1">^ <a class="header-anchor" href="#" aria-label="Permalink to &quot;^&quot;">​</a></h3><p>^ 表示兼容更新。以第一个非0数字不变，向后更新</p><h3 id="-1" tabindex="-1">~ <a class="header-anchor" href="#-1" aria-label="Permalink to &quot;~&quot;">​</a></h3><p>~ 只更新小版本。 比如 ~1.0.0 就不会更新到1.1.0</p><h3 id="x" tabindex="-1">x <a class="header-anchor" href="#x" aria-label="Permalink to &quot;x&quot;">​</a></h3><p>x 可以这么写 ~1.2.x 1.x 他可以表示任何数字 ~1.x // 1.0.0 1.0.1 1.1.0 1.1.1 1.2.0 1.2.1 1.3.0 1.3.1 1.0.2 ~1.0.0 // 1.0.0 1.0.1 1.0.2 这样查的是不一样的</p><h3 id="-2" tabindex="-1">* <a class="header-anchor" href="#-2" aria-label="Permalink to &quot;*&quot;">​</a></h3><p>用法和上面一致 *可以表示任何数字和字符串</p><h3 id="-3" tabindex="-1">&gt;= &lt; <a class="header-anchor" href="#-3" aria-label="Permalink to &quot;&gt;= &lt;&quot;">​</a></h3><p>这些符号可以用于指定一个版本范围，例如，&gt;=1.2.3 &lt;2.0.0 表示版本号在 1.2.3 及以上但不包括 2.0.0。</p><h3 id="latest" tabindex="-1">latest <a class="header-anchor" href="#latest" aria-label="Permalink to &quot;latest&quot;">​</a></h3><p>指代最新版本</p><h2 id="开发阶段版本" tabindex="-1">开发阶段版本 <a class="header-anchor" href="#开发阶段版本" aria-label="Permalink to &quot;开发阶段版本&quot;">​</a></h2><p>Alpha版本（Alpha）:</p><p>含义： Alpha 版本是软件开发周期中的早期阶段，通常在内部测试阶段。这个阶段的软件可能仍然包含较多的缺陷，功能也可能不完整。 用途： 主要用于内部团队的测试，以发现和修复软件中的缺陷。 Beta版本（Beta）:</p><p>含义： Beta 版本是相对稳定的软件版本，功能已经完成，但可能仍存在一些缺陷。这个阶段的软件通常对外部测试人员和用户开放。 用途： 用于公共测试，希望通过用户的反馈来发现并修复潜在的问题。 Release Candidate版本（rc，Release Candidate）:</p><p>含义： Release Candidate（候选发布版）是在 Beta 阶段后的一个阶段，被认为非常接近最终发布版本。在这个阶段，软件通常被认为是稳定的，除非发现重大问题，否则将被发布为最终版本。 用途： 作为最终发布之前的最后一轮测试版本，用于进一步验证软件的稳定性。</p>',25),n=[l];function i(s,p,h,d,c,u){return t(),e("div",null,n)}const b=a(r,[["render",i]]);export{m as __pageData,b as default};
