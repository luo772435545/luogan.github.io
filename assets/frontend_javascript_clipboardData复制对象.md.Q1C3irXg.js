import{_ as a,c as s,o as i,U as n}from"./chunks/framework.Lp4q01XK.js";const q=JSON.parse('{"title":"clipboardData复制对象","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/javascript/clipboardData复制对象.md","filePath":"frontend/javascript/clipboardData复制对象.md"}'),t={name:"frontend/javascript/clipboardData复制对象.md"},p=n(`<h1 id="clipboarddata复制对象" tabindex="-1">clipboardData复制对象 <a class="header-anchor" href="#clipboarddata复制对象" aria-label="Permalink to &quot;clipboardData复制对象&quot;">​</a></h1><p>该对象是在粘贴的时候出现(用完即删)</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;paste&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 阻止默认粘贴行为</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 获取剪贴板数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clipboardData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.clipboardData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.clipboardData;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pastedText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clipboardData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 处理剪贴板中的文本数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Pasted Text:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pastedText);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="属性" tabindex="-1">属性： <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性：&quot;">​</a></h2><ul><li><p>types： 返回一个数组，包含剪贴板中可用的数据类型（格式）。</p></li><li><p>items： 类数组对象，包含剪贴板中的数据项。每个数据项都是一个对象，具有特定的属性和方法。</p></li><li><p>files： 类数组对象，包含剪贴板中的文件数据。通常在处理文件拖放操作时使用。</p></li><li><p>dropEffect： 获取或设置拖放操作的效果（&quot;copy&quot;、&quot;move&quot;、&quot;link&quot; 等）。</p></li><li><p>effectAllowed： 获取或设置拖放操作的允许效果。</p></li></ul><h2 id="方法" tabindex="-1">方法： <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法：&quot;">​</a></h2><ul><li><p>getData(format: string): string： 根据指定的格式获取剪贴板中的数据。</p></li><li><p>setData(format: string, data: string): void： 向剪贴板中设置数据。</p></li><li><p>clearData(format?: string): boolean： 清除剪贴板中指定格式的数据。如果未提供格式，则清除所有数据。</p></li><li><p>setDragImage(image: Element, x: number, y: number): void： 设置拖拽操作的图像。</p></li></ul><h2 id="类型" tabindex="-1">类型 <a class="header-anchor" href="#类型" aria-label="Permalink to &quot;类型&quot;">​</a></h2><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>    &quot;text/plain&quot;： 纯文本格式。</span></span>
<span class="line"><span>    &quot;text/html&quot;： HTML 格式。</span></span>
<span class="line"><span>    &quot;image/png&quot;、&quot;image/jpeg&quot;： 图像格式。</span></span>
<span class="line"><span>    &quot;application/json&quot;： JSON 格式。</span></span>
<span class="line"><span>    &quot;text/rtf&quot;： 富文本格式。</span></span>
<span class="line"><span>    &quot;application/xml&quot;： XML 格式。</span></span>
<span class="line"><span>    &quot;text/css&quot;： CSS 样式表格式。</span></span>
<span class="line"><span>    &quot;audio/mp3&quot;、&quot;audio/wav&quot;： 音频格式。</span></span>
<span class="line"><span>    &quot;video/mp4&quot;、&quot;video/ogg&quot;： 视频格式。</span></span>
<span class="line"><span>    &quot;text/csv&quot;： CSV 格式。</span></span>
<span class="line"><span>    &quot;application/pdf&quot;： PDF 格式。</span></span>
<span class="line"><span>    &quot;application/vnd.ms-excel&quot;： Microsoft Excel 格式。</span></span>
<span class="line"><span>    &quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;： Excel Open XML Spreadsheet 格式。</span></span>
<span class="line"><span>    &quot;application/vnd.ms-powerpoint&quot;： Microsoft PowerPoint 格式。</span></span>
<span class="line"><span>    &quot;application/zip&quot;： ZIP 压缩格式。</span></span>
<span class="line"><span>    &quot;application/octet-stream&quot;： 二进制流格式。</span></span>
<span class="line"><span>    &quot;text/javascript&quot;、&quot;application/javascript&quot;： JavaScript 代码格式。</span></span>
<span class="line"><span>    &quot;application/xhtml+xml&quot;： XHTML 格式。</span></span>
<span class="line"><span>    &quot;text/calendar&quot;： 日历数据格式。</span></span>
<span class="line"><span>    &quot;application/msword&quot;： Microsoft Word 格式。</span></span>
<span class="line"><span>    &quot;application/vnd.openxmlformats-officedocument.wordprocessingml.document&quot;： Word Open XML Document 格式。</span></span>
<span class="line"><span>    &quot;application/vnd.mozilla.xul+xml&quot;： XUL 格式。</span></span>
<span class="line"><span>    &quot;application/vnd.oasis.opendocument.text&quot;： ODT 格式。</span></span>
<span class="line"><span>    &quot;application/epub+zip&quot;： EPUB 电子书格式。</span></span></code></pre></div><h2 id="items-对象【datatransferitemlist】" tabindex="-1">items 对象【DataTransferItemList】 <a class="header-anchor" href="#items-对象【datatransferitemlist】" aria-label="Permalink to &quot;items 对象【DataTransferItemList】&quot;">​</a></h2><h3 id="属性-1" tabindex="-1">属性： <a class="header-anchor" href="#属性-1" aria-label="Permalink to &quot;属性：&quot;">​</a></h3><p>length： 表示剪贴板中的数据项数量。</p><h3 id="方法-1" tabindex="-1">方法： <a class="header-anchor" href="#方法-1" aria-label="Permalink to &quot;方法：&quot;">​</a></h3><p>clear(): void： 清空剪贴板中的所有数据项。</p><p>add(data: DataTransferItem): void： 向剪贴板中添加一个新的数据项。</p><p>remove(index: number): void： 移除剪贴板中指定索引位置的数据项。</p><h3 id="数据项-datatransferitem-对象" tabindex="-1">数据项 (DataTransferItem) 对象： <a class="header-anchor" href="#数据项-datatransferitem-对象" aria-label="Permalink to &quot;数据项 (DataTransferItem) 对象：&quot;">​</a></h3><p>每个数据项都是一个 DataTransferItem 对象，具有以下属性和方法：</p><h3 id="属性-2" tabindex="-1">属性： <a class="header-anchor" href="#属性-2" aria-label="Permalink to &quot;属性：&quot;">​</a></h3><p>kind： 表示数据项的类型，可以是 &quot;string&quot;、&quot;file&quot; 等。</p><p>type： 表示数据项的 MIME 类型，描述数据的具体格式。</p><h3 id="方法-2" tabindex="-1">方法： <a class="header-anchor" href="#方法-2" aria-label="Permalink to &quot;方法：&quot;">​</a></h3><p>getAsFile(): File： 如果数据项是文件，则返回对应的 File 对象。</p><p>getAsString(callback: Function): void： 异步获取数据项的文本内容，通过回调函数处理获取的文本。</p><p>webkitGetAsEntry(): Entry： 获取数据项的文件系统 entry（仅在 WebKit 内核的浏览器中可用）。</p><h3 id="qq复制使用" tabindex="-1">QQ复制使用 <a class="header-anchor" href="#qq复制使用" aria-label="Permalink to &quot;QQ复制使用&quot;">​</a></h3><ol><li>单纯复制图片类型为file</li><li>复制图片+文字 items kind = text/plain 和string ，为html 显示图片地址为本地地址</li></ol><h3 id="问题" tabindex="-1">问题 <a class="header-anchor" href="#问题" aria-label="Permalink to &quot;问题&quot;">​</a></h3><ol><li>选择复制 然后里面包含图片和文字</li></ol>`,29),e=[p];function l(o,r,h,d,c,k){return i(),s("div",null,e)}const E=a(t,[["render",l]]);export{q as __pageData,E as default};
